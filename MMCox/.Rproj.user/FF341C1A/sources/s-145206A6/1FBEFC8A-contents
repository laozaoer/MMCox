Data_object=function(t,X,Z,b,r,beta,gamma,theta,U,H){
  Ht=H(t)
  if(r>0){
    S=(1+r*Ht*exp(sum(beta*X)+sum(gamma*Z)+theta*b))^(-1/r)
  }
  else{
    S=exp(-Ht*exp(sum(beta*X)+sum(gamma*Z)+theta*b))
  }
  
  return(S-U)
}
Generate_singleT=function(X,Z,b,r,beta,gamma,theta,H){
  U=runif(1,0,1)
  tresult=nleqslv::nleqslv(x=0.1,fn=Data_object,X=X,Z=Z,b=b,r=r,beta=beta,gamma=gamma,theta=theta,U=U,H=H)
  return(tresult$x)
}
Generate_T=function(X,Z,b,r,beta,gamma,theta,n,ni,H){
  result=list()
  length(result)=n
  for (i in 1:n) {
    result[[i]]=rep(0,ni[i])
    for (j in 1:ni[i]) {
      result[[i]][j]=Generate_singleT(X[[i]][j,],Z[i,],b[i],r,beta,gamma,theta,H)
    }
  }
  return(result)
}
data_for_est=function(r,beta,gamma,theta,n,H){
  betadim=length(beta)
  gammadim=length(gamma)
  Z=matrix(runif(n*gammadim,-1,1),nrow = n,ncol = gammadim)
  mi=rep(0,n)
  b=rnorm(n,0,1)
  for(i in 1:n){
    mi[i]=extraDistr::rtpois(1,exp(1.7),a=1,b=8)
  }
  C=list()
  length(C)=n+1
  for(i in 1:n){
    C[[i]]=runif(mi[i],0,1)
  }
  X=list()
  length(X)=n
  for (i in 1:n) {
    X[[i]]=matrix(runif(mi[i]*betadim,-1,1),nrow = mi[i],ncol=betadim)
  }
  
  
  
  rawC=suppressWarnings(Generate_T(X,Z,b,r,beta,gamma,theta,n,mi,H))
  lowC=0
  upC=quantile(as.numeric(as.character(unlist(rawC))),probs = 0.85)
  
  for(i in 1:n){
    C[[i]]=runif(mi[i],lowC,upC)
  }
  C[[n+1]]=upC
  Delta=list()
  length(Delta)=n
  for (i in 1:n) {
    Delta[[i]]=rep(0,mi[i])
    for (j in 1:mi[i]) {
      if(rawC[[i]][j]<=C[[i]][j]){
        Delta[[i]][j]=1
      }
    }
  }
  
  
  return(list(X=X,Z=Z,n=n,ni=mi,r=r,Delta=Delta,C=C))
}
SIM_DATA=function(r,beta,gamma,theta,n,H,up.quantile,par_size){
  betadim=length(beta)
  gammadim=length(gamma)
  Z=matrix(runif(n*gammadim,-1,1),nrow = n,ncol = gammadim)
  mi=rep(0,n)
  b=rnorm(n,0,1)
  for(i in 1:n){
    mi[i]=extraDistr::rtpois(1,par_size[1],a=par_size[2],b=par_size[3])
  }
  C=list()
  length(C)=n
  for(i in 1:n){
    C[[i]]=runif(mi[i],0,1)
  }
  X=list()
  length(X)=n
  for (i in 1:n) {
    X[[i]]=matrix(runif(mi[i]*betadim,-1,1),nrow = mi[i],ncol=betadim)
  }
  
  
  
  rawC=suppressWarnings(Generate_T(X,Z,b,r,beta,gamma,theta,n,mi,H))
  lowC=quantile(as.numeric(as.character(unlist(rawC))),probs = 0.3)
  upC=quantile(as.numeric(as.character(unlist(rawC))),probs = 0.8)
  
  
  
  for(i in 1:n){
    C[[i]]=cbind(runif(mi[i],0,lowC),runif(mi[i],lowC,upC))
  }
  Delta=list()
  length(Delta)=n
  for (i in 1:n) {
    Delta[[i]]=matrix(0,nrow=mi[i],2)
    for (j in 1:mi[i]) {
      if(rawC[[i]][j]<=C[[i]][j,1]){
        Delta[[i]][j,1]=1
      }else if(rawC[[i]][j]>C[[i]][j,2]){
        Delta[[i]][j,2]=1
      }
    }
  }
  for (i in 1:n) {
    for(j in 1:mi[i]){
      if(Delta[[i]][j,1]==1){
        C[[i]][j,]=c(0,C[[i]][j,1])
      }else if(Delta[[i]][j,2]==1){
        C[[i]][j,]=c(C[[i]][j,2],Inf)
      }
    }
  }
  
  return(list(X=X,Z=Z,n=n,ni=mi,r=r,Delta=Delta,C=C))
}

Data_trans=function(data){
  result=c()
  for(i in 1:data$n){
    resultI=cbind(rep(i,data$ni[i]),data$C[[i]],data$Delta[[i]],data$X[[i]])
    result=rbind(result,resultI)
  }
  return(result)
}

              


tktemp=sort(unique(c(myD[,2],myD[,3])))
tk=tktemp[-c(1,length(tktemp))]


TL=TmatL(myD[,2:3],tk)
TR=TmatR(myD[,2:3],tk)
TLR=TmatLR(myD[,2:3],tk)

beta=as.matrix(c(-0.5,0.5,0.25))
theta=0.5
gamma=as.matrix(rep(0.001,length(tk)))



library(gaussquad)
myrules=gaussquad::hermite.h.quadrature.rules(30,normalized=FALSE)
myrules=as.matrix(myrules[[30]])




a=Likelihood_rules(myrules,beta,theta,gamma,myD,TL,TR)
b=WeightFunc(myrules,beta,theta,gamma,myD,TL,TR)

a=UpdateonceNew(myrules,beta,theta,gamma,myD,TL,TR,TLR)

H=function(t) log(1+t)+t^(3/2)
data=SIM_DATA(r=0,beta=c(-1,1,0.5),gamma=c(0),theta=0.5,n=50,H=H,up.quantile=0.85,
              par_size=c(exp(1.7),1,8)) 
myD=Data_trans(data = data)

begin=Sys.time()
b=MainFunc(myD,myrules,0.001)
end=Sys.time()
end-begin
b[[2]]
b[[4]]

begin=Sys.time()
b2=MainFuncClosd(myD,myrules,0.001)
end=Sys.time()
end-begin
b2[[2]]
b2[[4]]

tktemp=sort(unique(c(myD[,2],myD[,3])))
tk=tktemp
tk=tk[-1]
tk=tk[tk<max(myD[,2])]
gamma=rep(0.1,length(tk))

b3=LogProfileLikeli(2,myD,myrules,0.001,as.matrix(c(-1,0.5,1.0)),1.0,as.matrix(gamma))
# 
# Testsort(myD)





TL=TmatL(myD[,2:3],tk)
TR=TmatR(myD[,2:3],tk)
TLR=TmatLR(myD[,2:3],tk)
a=UpdateonceProfileTheta(myrules,as.matrix(c(-1,1,0.5)),0.5,as.matrix(gamma),myD,TL,TR,TLR)
LikeliValue(myrules,as.matrix(c(-1,1,0.5)),0.5,as.matrix(gamma),myD,TL,TR)

